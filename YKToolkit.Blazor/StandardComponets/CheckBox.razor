@namespace YKToolkit.Blazor
@using System.Windows.Input

<div class="form-check">
    <input type="checkbox" id="@_id" class="@(@class)" checked="@IsChecked" @onclick="() => OnClick()" disabled="@Disabled" />
    @((MarkupString)_label)
</div>

@code {
    /// <summary>
    /// CSS クラスとして示す文字列を取得または設定します。
    /// </summary>
    [Parameter]
    public string? @class { get; set; } = "form-check-input";

    /// <summary>
    /// チェックボックスに対応するラベルを取得または設定します。
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool IsChecked { get; set; }

    [Parameter]
    public EventCallback<bool> IsCheckedChanged { get; set; }

    private bool _isEnabled = true;
    /// <summary>
    /// ボタンが操作可能かどうかを取得または設定します。
    /// </summary>
    [Parameter]
    public bool IsEnabled
    {
        get => this._isEnabled;
        set
        {
            this._isEnabled = value;
            UpdateCanExecute();
        }
    }

    private ICommand? _command;
    /// <summary>
    /// ボタン操作によって実行されるコマンドを取得または設定します。
    /// </summary>
    [Parameter]
    public ICommand? Command
    {
        get { return this._command; }
        set
        {
            if (this._command != null)
            {
                this._command.CanExecuteChanged -= OnCanExecuteChanged;
            }
            this._command = value;
            if (this._command != null)
            {
                this._command.CanExecuteChanged += OnCanExecuteChanged;
            }
        }
    }

    /// <summary>
    /// ボタン操作によって実行されるコマンドに対するパラメータを取得または設定します。
    /// </summary>
    [Parameter]
    public object? CommandParameter { get; set; }

    /// <summary>
    /// 再レンダリング時にラベルが消失する現象を回避するために用意したプロパティです。MarkupString でキャストすることで消失現象を回避しています。
    /// </summary>
    private string _label { get => $"<label class-\"form-check-label\" for=\"{_id}\">{this.Label}</label>"; }

    /// <summary>
    /// ボタンの操作禁止状態を取得または設定します。
    /// </summary>
    private bool Disabled { get; set; }

    public CheckBox()
    {
        this._id = $"checkbox{_idCounter++}";
    }

    /// <summary>
    /// レンダリングツリーのコンポーネントの親またはルートパラメータから指定されたパラメータが設定されます。
    /// </summary>
    /// <returns>コンポーネントの更新とレンダリングが完了したときに完了するタスクを返します。</returns>
    protected override Task OnParametersSetAsync()
    {
        UpdateCanExecute();

        return base.OnParametersSetAsync();
    }

    /// <summary>
    /// CanExecuteChanged イベントハンドラ
    /// </summary>
    /// <param name="sender">イベント発行元</param>
    /// <param name="e">イベント引数</param>
    private void OnCanExecuteChanged(object? sender, EventArgs e)
    {
        UpdateCanExecute();
    }

    /// <summary>
    /// ボタンの操作可否を更新します。
    /// </summary>
    private void UpdateCanExecute()
    {
        if (this.IsEnabled)
        {
            this.Disabled = !Command?.CanExecute(CommandParameter) ?? false;
        }
        else
        {
            this.Disabled = true;
        }
    }

    private async void OnClick()
    {
        this.IsChecked = !this.IsChecked;
        await this.IsCheckedChanged.InvokeAsync(this.IsChecked);
        Command?.Execute(CommandParameter);
    }

    private static int _idCounter;

    private readonly string _id;
}
